"use strict";(self.webpackChunkautomation_dev_portal=self.webpackChunkautomation_dev_portal||[]).push([[873],{9586:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var r=n(4848),s=n(8453);const i={sidebar_position:1},o="Stack",a={id:"Guides/programming/data-structure/linear/stack",title:"Stack",description:"Definition",source:"@site/docs/Guides/programming/data-structure/linear/stack.md",sourceDirName:"Guides/programming/data-structure/linear",slug:"/Guides/programming/data-structure/linear/stack",permalink:"/automation-portal/docs/Guides/programming/data-structure/linear/stack",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Queue",permalink:"/automation-portal/docs/Guides/programming/data-structure/linear/queue"},next:{title:"Non-Linear Data Structures",permalink:"/automation-portal/docs/category/non-linear-data-structures"}},l={},c=[];function d(t){const e={h1:"h1",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"stack",children:"Stack"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Definition"}),"\r\nA stack is a linear data structure that follows the Last In, First Out (LIFO) principle. It has two main operations:"]}),"\n",(0,r.jsx)(e.p,{children:"Push: To add an element onto the stack.\r\nPop: To remove the most recently added element from the stack."}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Usecases"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Undo/Redo Features"}),": In text editors or graphic design software."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Expression Evaluation"}),": In calculators for postfix or prefix notation."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Backtracking Algorithms"}),": Such as maze solving and tree traversal."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Call Stack"}),": In programming languages for function calls."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Parentheses Matching"}),": In compilers to check for balanced symbols."]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Operations"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"push(item): Adds item to the top of the stack."}),"\n",(0,r.jsx)(e.li,{children:"pop(): Removes and returns the item from the top."}),"\n",(0,r.jsx)(e.li,{children:"peek(): Views the top item without removing it."}),"\n",(0,r.jsx)(e.li,{children:"isEmpty(): Checks if the stack is empty."}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Complexity"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Push: O(1)"}),"\n",(0,r.jsx)(e.li,{children:"Pop: O(1)"}),"\n",(0,r.jsx)(e.li,{children:"Peek: O(1)"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Implementations"}),"\r\nCommonly implemented using arrays or linked lists."]})]})}function u(t={}){const{wrapper:e}={...(0,s.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(d,{...t})}):d(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>o,x:()=>a});var r=n(6540);const s={},i=r.createContext(s);function o(t){const e=r.useContext(i);return r.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function a(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:o(t.components),r.createElement(i.Provider,{value:e},t.children)}}}]);