"use strict";(self.webpackChunkautomation_dev_portal=self.webpackChunkautomation_dev_portal||[]).push([[1411],{5024:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>c});var s=r(4848),i=r(8453);const t={sidebar_position:1},o="Python",a={id:"Guides/programming/styling/python-styling",title:"Python",description:'Python Code Style Guide and Best Practices for the "Automation Team"',source:"@site/docs/Guides/programming/styling/python-styling.md",sourceDirName:"Guides/programming/styling",slug:"/Guides/programming/styling/python-styling",permalink:"/automation-portal/docs/Guides/programming/styling/python-styling",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Csharp",permalink:"/automation-portal/docs/Guides/programming/styling/csharp-styling"},next:{title:"Typescript",permalink:"/automation-portal/docs/Guides/programming/styling/ts-styling"}},l={},c=[{value:"Bonus :",id:"bonus-",level:2},{value:"Python Enhancement proposals",id:"python-enhancement-proposals",level:2},{value:"The Zen of Python:",id:"the-zen-of-python",level:2}];function d(n){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"python",children:"Python"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.em,{children:(0,s.jsx)(e.strong,{children:'Python Code Style Guide and Best Practices for the "Automation Team"'})})}),"\n",(0,s.jsx)(e.h2,{id:"bonus-",children:"Bonus :"}),"\n",(0,s.jsx)(e.h2,{id:"python-enhancement-proposals",children:(0,s.jsx)(e.a,{href:"https://peps.python.org/",children:"Python Enhancement proposals"})}),"\n",(0,s.jsx)(e.h2,{id:"the-zen-of-python",children:"The Zen of Python:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"Beautiful is better than ugly.\r\nExplicit is better than implicit.\r\nSimple is better than complex.\r\nComplex is better than complicated.\r\nFlat is better than nested.\r\nSparse is better than dense.\r\nReadability counts.\r\nSpecial cases aren't special enough to break the rules.\r\nAlthough practicality beats purity.\r\nErrors should never pass silently.\r\nUnless explicitly silenced.\r\nIn the face of ambiguity, refuse the temptation to guess.\r\nThere should be one-- and preferably only one --obvious way to do it.\r\nAlthough that way may not be obvious at first unless you're Dutch.\r\nNow is better than never.\r\nAlthough never is often better than *right* now.\r\nIf the implementation is hard to explain, it's a bad idea.\r\nIf the implementation is easy to explain, it may be a good idea.\r\nNamespaces are one honking great idea -- let's do more of those!\n"})}),"\n",(0,s.jsxs)(e.p,{children:["You always can use it by ",(0,s.jsx)(e.code,{children:'"import this"'})]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"1. Naming Conventions:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Variables, Functions, and Modules: Use lowercase with words separated by underscores (snake_case)."}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Classes: Use CamelCase, starting with an uppercase letter."}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Constants: Use all uppercase with words separated by underscores."}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Private Variables and Functions: Prefix with a single underscore (_variable, _function)."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"2. Indentation and Line Length:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Use 4 spaces for indentation, not tabs."}),"\n",(0,s.jsx)(e.li,{children:"Limit lines to 79 characters for code and 72 for comments and docstrings. If necessary, you can extend to a specific number of characters but avoid excessively long lines. (Remember to disable this in your linter if necessary)."}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"3. Imports:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Import modules on separate lines."}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Group imports into three sections: standard library imports, third-party library imports, and local project imports, with each section separated by a blank line."}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Avoid using wildcard imports (e.g., from module import *)."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"4. Function and Method Definitions:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Define functions and methods with a single space after the function name and before the opening parenthesis."}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Place default arguments at the end of the argument list (if using default arguments)."}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Use descriptive names for function arguments, and always provide clear explanations using docstrings."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Python",children:"# Good: Descriptive names\r\ndef calculate_area(width, height):\r\n    return width * height\r\n\r\n# Avoid: Non-descriptive names\r\ndef calculate_area(x, y):\r\n    return x * y\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"5.  Avoid Mutable Default Arguments in Functions:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Python",children:"# Good:\r\ndef func(arg1, arg2=None):\r\n    if arg2 is None:\r\n        arg2 = []\r\n\r\n# Avoid:\r\ndef func(arg1, arg2=[]):\r\n    pass\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"6. Comments:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Use comments to explain complex logic, algorithms, or intentions."}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Write descriptive comments to aid understanding."}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Avoid unnecessary comments that do not add value."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"7. String Formatting:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Prefer f-strings for string formatting when possible."}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Python",children:"val = 'Geeks'\r\nprint(f\"{val} for {val} is a portal for {val}.\")\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"8. Error Handling"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Use appropriate exception handling to prevent unexpected program crashes."}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Avoid using bare except: statements. Be specific about the exceptions you catch (e.g., except SpecificExceptionType as e:)."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"9. Recommendations:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Avoid comparing with == when checking for None. Use is instead."}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Use is not instead of if not."}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Avoid using the type() function. Use isinstance() instead."}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Add TODO: comments as placeholders where future work is needed."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"10. Function and Module Documentation:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["Clearly document functions and modules using docstrings, providing examples where necessary.\r\n",(0,s.jsx)(e.strong,{children:"Example 1:"})]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Python",children:'def function1(arg1: int, arg2: str) -> bool:\r\n    """\r\n    Description of function1.\r\n\r\n    Args:\r\n        arg1 (int): Description of arg1.\r\n        arg2 (str): Description of arg2.\r\n\r\n    Returns:\r\n        bool: Description of the return value.\r\n    """\r\n    # Implementation of function1\r\n    pass\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Example 2: for exceptions"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Python",children:'def connect_to_next_port(self, minimum: int) -> int:\r\n    """Connects to the next available port.\r\n\r\n    Args:\r\n      minimum: A port value greater or equal to 1024.\r\n\r\n    Returns:\r\n      The new minimum port.\r\n\r\n    Raises:\r\n      ConnectionError: If no available port is found.\r\n    """\r\n    if minimum < 1024:\r\n      # Note that this raising of ValueError is not mentioned in the doc\r\n      # string\'s "Raises:" section because it is not appropriate to\r\n      # guarantee this specific behavioral reaction to API misuse.\r\n      raise ValueError(f\'Min. port must be at least 1024, not {minimum}.\')\r\n    port = self._find_next_open_port(minimum)\r\n    if port is None:\r\n      raise ConnectionError(\r\n          f\'Could not connect to service on port {minimum} or higher.\')\r\n    assert port >= minimum, (\r\n        f\'Unexpected port {port} when minimum was {minimum}.\')\r\n    return port\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"11. Module documentation:"}),"\r\n",(0,s.jsx)(e.strong,{children:"Example:"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Python",children:'# module_name.py\r\n\r\n"""\r\nThis module provides functions to perform specific tasks.\r\n\r\nFunctions:\r\n    function1(arg1, arg2): Description of function1.\r\n    functio\r\n\r\nn2(arg1): Description of function2.\r\n"""\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"12. TODO Comments"}),"\r\n",(0,s.jsx)(e.code,{children:"# # TODO(yourusername): File an issue and use a '*' for repetition."})]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"13.Logical Grouping of Imports:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Group imports according to their origin: standard libraries, third-party libraries, and local imports."}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Python",children:"# Standard library imports\r\nimport os\r\nimport sys\r\n\r\n# Third-party imports\r\nimport numpy as np\r\nimport pandas as pd\r\n\r\n# Your own module imports\r\nfrom my_module import MyClass, my_function\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"14. String formating (continued) :"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Use f-strings for clean and readable string concatenation."}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Python",children:'name = "Alice"\r\nage = 30\r\n\r\n# Good:\r\nmessage = f"Hello, my name is {name} and I am {age} years old."\r\n\r\n# Avoid:\r\nmessage = "Hello, my name is " + name + " and I am " + str(age) + " years old."\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"15.List comprehension and generator expressions:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Prefer these expressions for clean and efficient code."}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Python",children:"# List comprehension\r\nsquares = [x**2 for x in range(10)]\r\n\r\n# Generator expression\r\nsquares_gen = (x**2 for x in range(10))\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"16. Function and method chaining:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Utilize chaining for clean, readable code."}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Python",children:"# Chaining methods\r\nresult = some_string.strip().lower().replace('a', 'b')\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"17.Context Managers and the with Statement:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Use context managers for managing resources, such as files, to ensure proper cleanup."}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Python",children:'# Good:\r\nwith open("file.txt", "r") as file:\r\n    content = file.read()\r\n\r\n# Avoid:\r\nfile = open("file.txt", "r")\r\ncontent = file.read()\r\nfile.close()\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"18.Use is and is not for Identity Comparison"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Prefer these keywords for comparing object identities."}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Python",children:"# Good:\r\nif x is None:\r\n    pass\r\n\r\nif y is not None:\r\n    pass\r\n\r\n# Avoid:\r\nif x == None:\r\n    pass\r\n\r\nif y != None:\r\n    pass\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"19.Use parentheses for multiline expressions:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Enhance readability by enclosing multiline expressions in parentheses."}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Python",children:"# Good:\r\nresult = (10 + 20 +\r\n          30 + 40 +\r\n          50)\r\n\r\n# Avoid:\r\nresult = 10 + 20 +\r\n         30 + 40 +\r\n         50\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"20.Use enumerate for Iterating with an Index:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Utilize enumerate for cleaner, more Pythonic iteration with indices."}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Python",children:'# Good:\r\nfruits = ["apple", "banana", "orange"]\r\nfor idx, fruit in enumerate(fruits):\r\n    print(f"Index {idx}: {fruit}")\r\n\r\n# Avoid:\r\nfruits = ["apple", "banana", "orange"]\r\nfor i in range(len(fruits)):\r\n    print(f"Index {i}: {fruits[i]}")\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"21.Use descriptive names for function arguments:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Choose meaningful argument names for clarity."}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Python",children:"# Good:\r\ndef calculate_area(base, height):\r\n    return 0.5 * base * height\r\n\r\n# Avoid:\r\ndef calculate_area(b, h):\r\n    return 0.5 * b * h\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"22. Use the in Keyword for Membership Tests:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Prefer in over other methods for checking membership in a collection"}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Python",children:"# Good:\r\nif element in my_list:\r\n    pass\r\n\r\nif key in my_dict:\r\n    pass\r\n\r\n# Avoid:\r\nif my_list.count(element) > 0:\r\n    pass\r\n\r\nif my_dict.has_key(key):\r\n    pass\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"23. Use Tuple Unpacking for Multiple Return Values:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Prefer tuple unpacking for clean, readable code."}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Python",children:'# Good:\r\ndef get_name_and_age():\r\n    return "John", 30\r\n\r\nname, age = get_name_and_age()\r\nprint(name, age)  # Output: John 30\r\n\r\n# Avoid:\r\nresult = get_name_and_age()\r\nname = result[0]\r\nage = result[1]\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"24. Avoid Single-Character Names for Common Objects :"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:'e.g like "user_list" don\'t name it "l".'}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:"Choose descriptive names that convey the purpose of the object."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Python",children:'# Good: \r\nuser_list = ["Shimon","Havazelet","Pinhas"]\r\n\r\n# Avoid:\r\nl = ["Shimon","Havazelet","Pinhas"]\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"25. Use isinstance() instead of type comparisons:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Utilize isinstance() for type checks, especially when dealing with inheritance."}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Python",children:"# Good:\r\nif isinstance(my_var, int):\r\n    pass\r\n\r\n# Avoid:\r\nif type(my_var) is int:\r\n    pass\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:"** 26\u05e5 Exception classes should end in \u201cError\u201d:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Python",children:'class MyCustomError(Exception):\r\n    pass\r\n\r\n# Good:\r\ntry:\r\n    raise MyCustomError("Something went wrong.")\r\nexcept MyCustomError as e:\r\n    print(f"Caught custom error: {e}")\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"27.Use Underscores for Large Number Literals:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"For better readability, use underscores to separate digits in large number literals."}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Python",children:"# Good:\r\nmillion = 1_000_000\r\n\r\n# Avoid:\r\nmillion = 1000000\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"28. Prefer Generators for Large Datasets:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Use generators instead of lists when working with large datasets to save memory."}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Python",children:"# Good:\r\nnumbers = (x for x in range(1, 1000000))\r\n\r\n# Avoid:\r\nnumbers = [x for x in range(1, 1000000)]\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"29. Embrace Modular Programming:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Break down large functions and classes into smaller, more manageable pieces to improve reusability and maintainability."}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"30. Optimize Import Statements:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Remove unnecessary import statements and only import what you need."}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Python",children:"# Good:\r\nfrom os import path\r\n\r\n# Avoid:\r\nimport os\n"})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"31. Use Decorators to Enhance Functions:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Utilize decorators for cross-cutting concerns like logging, timing, or access control."}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-Python",children:'from functools import wraps\r\n\r\ndef log_function_call(f):\r\n    @wraps(f)\r\n    def wrapper(*args, **kwargs):\r\n        print(f"Calling {f.__name__}")\r\n        return f(*args, **kwargs)\r\n    return wrapper\r\n\r\n@log_function_call\r\ndef my_function():\r\n    pass\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"32. Avoid Over-Optimization:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Write clear and readable code first; optimize only when necessary, based on actual performance measurements."}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>o,x:()=>a});var s=r(6540);const i={},t=s.createContext(i);function o(n){const e=s.useContext(t);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),s.createElement(t.Provider,{value:e},n.children)}}}]);