"use strict";(self.webpackChunkautomation_dev_portal=self.webpackChunkautomation_dev_portal||[]).push([[8932],{8859:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var s=r(4848),t=r(8453);const o={sidebar_position:1},i="Observer - PubSub",a={id:"Guides/programming/design-patterns/observer",title:"Observer - PubSub",description:"Observer Design Pattern:",source:"@site/docs/Guides/programming/design-patterns/observer.md",sourceDirName:"Guides/programming/design-patterns",slug:"/Guides/programming/design-patterns/observer",permalink:"/automation-portal/docs/Guides/programming/design-patterns/observer",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Iterator",permalink:"/automation-portal/docs/Guides/programming/design-patterns/iterator"},next:{title:"Singleton",permalink:"/automation-portal/docs/Guides/programming/design-patterns/singleton"}},c={},l=[{value:"<strong>Observer Design Pattern:</strong>",id:"observer-design-pattern",level:2},{value:"<em><strong>Another Overview:</strong></em>",id:"another-overview",level:3},{value:"<strong>Example:</strong>",id:"example",level:2}];function u(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"observer---pubsub",children:"Observer - PubSub"}),"\n",(0,s.jsx)(n.h2,{id:"observer-design-pattern",children:(0,s.jsx)(n.strong,{children:"Observer Design Pattern:"})}),"\n",(0,s.jsx)(n.p,{children:"This pattern involves an object (called the subject) that maintains a list of its dependents (observers) and notifies them of any state changes. It's often used when a change to one object requires changes to others."}),"\n",(0,s.jsx)(n.h3,{id:"another-overview",children:(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"Another Overview:"})})}),"\n",(0,s.jsx)(n.p,{children:"It's common for different components of an app to respond to events or state changes, but how can we communicate these events? The Observer pattern is a popular solution. We have a Subject (aka Publisher) which will be the source of events. And we could have multiple Observers (aka Subscribers) which will recieve events from the Subject in realtime."}),"\n",(0,s.jsx)(n.h2,{id:"example",children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class YoutubeChannel:\r\n    def __init__(self, name):\r\n        self.name = name\r\n        self.subscribers = []\r\n\r\n    def subscribe(self, sub):\r\n        self.subscribers.append(sub)\r\n    \r\n    def notify(self, event):\r\n        for sub in self.subscribers:\r\n            sub.sendNotification(self.name, event)\r\n\r\nfrom abc import ABC, abstractmethod\r\n\r\nclass YoutubeSubscriber(ABC):\r\n    @abstractmethod\r\n    def sendNotification(self, event):\r\n        pass\r\n\r\nclass YoutubeUser(YoutubeSubscriber):\r\n    def __init__(self, name):\r\n        self.name = name\r\n    \r\n    def sendNotification(self, channel, event):\r\n        print(f"User {self.name} received notification from {channel}: {event}")\r\n\r\nchannel = YoutubeChannel("neetcode")\r\n\r\nchannel.subscribe(YoutubeUser("sub1"))\r\nchannel.subscribe(YoutubeUser("sub2"))\r\nchannel.subscribe(YoutubeUser("sub3"))\r\n\r\nchannel.notify("A new video released")\n'})}),"\n",(0,s.jsx)(n.p,{children:"In this case we have multiple Subscribers listening to a single published. But users could also be subscribed to multiple channels. Since the Publishers & Subscribers don't have to worry about each others' implementations, they are loosely coupled."})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var s=r(6540);const t={},o=s.createContext(t);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);