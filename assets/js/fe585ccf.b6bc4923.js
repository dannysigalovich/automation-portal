"use strict";(self.webpackChunkautomation_dev_portal=self.webpackChunkautomation_dev_portal||[]).push([[6300],{1658:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var t=i(4848),r=i(8453);const s={sidebar_position:1},o="Linked List",l={id:"Guides/programming/data-structure/linear/linkedlist",title:"Linked List",description:"Overview",source:"@site/docs/Guides/programming/data-structure/linear/linkedlist.md",sourceDirName:"Guides/programming/data-structure/linear",slug:"/Guides/programming/data-structure/linear/linkedlist",permalink:"/automation-portal/docs/Guides/programming/data-structure/linear/linkedlist",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Array",permalink:"/automation-portal/docs/Guides/programming/data-structure/linear/array"},next:{title:"Queue",permalink:"/automation-portal/docs/Guides/programming/data-structure/linear/queue"}},a={},d=[];function c(e){const n={h1:"h1",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"linked-list",children:"Linked List"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Overview"}),"\r\nA linked list is a linear data structure where elements are stored in nodes, each linking to the next node."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Types"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Singly Linked List: Each node has a value and a pointer to the next node."}),"\n",(0,t.jsx)(n.li,{children:"Doubly Linked List: Nodes have pointers to both next and previous nodes."}),"\n",(0,t.jsx)(n.li,{children:"Circular Linked List: The last node links back to the first."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Operations"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Insertion: Add a new node. Time complexity O(1) or O(n)."}),"\n",(0,t.jsx)(n.li,{children:"Deletion: Remove a node. Time complexity O(1) or O(n)."}),"\n",(0,t.jsx)(n.li,{children:"Traversal: Visit each node. Time complexity O(n)."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Use Cases"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Stack, Queue implementations"}),"\n",(0,t.jsx)(n.li,{children:"Browser history"}),"\n",(0,t.jsx)(n.li,{children:"Music playlists"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Advantages"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Dynamic size"}),"\n",(0,t.jsx)(n.li,{children:"Efficient insertions/deletions"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Disadvantages"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Extra memory for pointers"}),"\n",(0,t.jsx)(n.li,{children:"No direct access to elements; must traverse."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var t=i(6540);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);