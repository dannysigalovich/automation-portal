"use strict";(self.webpackChunkautomation_dev_portal=self.webpackChunkautomation_dev_portal||[]).push([[3347],{8140:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var n=r(4848),a=r(8453);const s={sidebar_position:1},o="Strategy",i={id:"Guides/programming/design-patterns/strategy",title:"Strategy",description:"Strategy Design Pattern:",source:"@site/docs/Guides/programming/design-patterns/strategy.md",sourceDirName:"Guides/programming/design-patterns",slug:"/Guides/programming/design-patterns/strategy",permalink:"/automation-portal/docs/Guides/programming/design-patterns/strategy",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Singleton",permalink:"/automation-portal/docs/Guides/programming/design-patterns/singleton"},next:{title:"Linters",permalink:"/automation-portal/docs/category/linters"}},l={},d=[{value:"<strong>Strategy Design Pattern:</strong>",id:"strategy-design-pattern",level:2}];function g(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"strategy",children:"Strategy"}),"\n",(0,n.jsx)(t.h2,{id:"strategy-design-pattern",children:(0,n.jsx)(t.strong,{children:"Strategy Design Pattern:"})}),"\n",(0,n.jsx)(t.p,{children:"A Class may have different behaviour, or invoke a different method based on something we define (i.e. a Strategy). For example, we can filter an array by removing positive values; or we could filter it by removing all odd values. These are two filtering strategies we could implement, but we could add many more."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",children:"from abc import ABC, abstractmethod\r\n\r\nclass FilterStrategy(ABC):\r\n\r\n    @abstractmethod\r\n    def removeValue(self, val):\r\n        pass\r\n\r\nclass RemoveNegativeStrategy(FilterStrategy):\r\n\r\n    def removeValue(self, val):\r\n        return val < 0 \r\n\r\nclass RemoveOddStrategy(FilterStrategy):\r\n\r\n    def removeValue(self, val):\r\n        return abs(val) % 2\r\n\r\n\r\nclass Values:\r\n    def __init__(self, vals):\r\n        self.vals = vals\r\n    \r\n    def filter(self, strategy):\r\n        res = []\r\n        for n in self.vals:\r\n            if not strategy.removeValue(n):\r\n                res.append(n)\r\n        return res\r\n\r\nvalues = Values([-7, -4, -1, 0, 2, 6, 9])\r\n\r\nprint(values.filter(RemoveNegativeStrategy()))\r\nprint(values.filter(RemoveOddStrategy()))\n"})}),"\n",(0,n.jsx)(t.p,{children:"A common alternative to this pattern is to simply pass in an inline / lambda function, which allows us to extend the behaviour of a method or class."})]})}function c(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(g,{...e})}):g(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>i});var n=r(6540);const a={},s=n.createContext(a);function o(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);